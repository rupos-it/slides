%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 359 575 432
%%Creator: yExport 1.2
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Tuesday, March 20, 2012 8:31:06 PM CET
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
874 112 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
874.000 0.00000 l
874.000 112.000 l
0.00000 112.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 874 112 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -394.000 -1167.00 ] concat
1.00000 1.00000 1.00000 RG
newpath
394.000 1167.00 m
1268.00 1167.00 l
1268.00 1279.00 l
394.000 1279.00 l
394.000 1167.00 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -394.000 -1167.00 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -394.000 -1167.00 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -394.000 -1167.00 ] defaultmatrix matrix concatmatrix setmatrix
1.00000 .400000 0.00000 RG
newpath
575.089 1171.04 m
795.803 1171.04 l
795.803 1274.04 l
575.089 1274.04 l
575.089 1171.04 l
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
642.680 1216.21 m
642.680 1194.53 l
648.583 1194.53 l
651.200 1194.53 653.080 1194.97 654.223 1195.85  c
655.365 1196.74 655.936 1198.19 655.936 1200.21  c
655.936 1202.52 655.155 1204.32 653.593 1205.63  c
652.030 1206.94 649.862 1207.59 647.089 1207.59  c
645.726 1207.59 l
645.726 1216.21 l
h
645.726 1205.27 m
646.972 1205.27 l
648.798 1205.27 650.209 1204.85 651.205 1204.01  c
652.201 1203.17 652.699 1201.98 652.699 1200.45  c
652.699 1199.15 652.308 1198.22 651.527 1197.66  c
650.746 1197.11 649.442 1196.83 647.616 1196.83  c
645.726 1196.83 l
h
667.553 1214.19 m
665.824 1215.78 664.159 1216.57 662.557 1216.57  c
661.239 1216.57 660.145 1216.16 659.276 1215.34  c
658.407 1214.51 657.973 1213.47 657.973 1212.21  c
657.973 1210.47 658.703 1209.14 660.162 1208.20  c
661.622 1207.27 663.715 1206.80 666.439 1206.80  c
667.128 1206.80 l
667.128 1204.88 l
667.128 1203.04 666.181 1202.12 664.286 1202.12  c
662.763 1202.12 661.117 1202.58 659.349 1203.52  c
659.349 1201.13 l
661.293 1200.34 663.114 1199.95 664.813 1199.95  c
666.591 1199.95 667.902 1200.35 668.746 1201.15  c
669.591 1201.95 670.014 1203.20 670.014 1204.88  c
670.014 1212.09 l
670.014 1213.74 670.521 1214.57 671.537 1214.57  c
671.664 1214.57 671.849 1214.55 672.094 1214.51  c
672.299 1216.11 l
671.644 1216.42 670.922 1216.57 670.131 1216.57  c
668.783 1216.57 667.924 1215.78 667.553 1214.19  c
h
667.128 1212.62 m
667.128 1208.50 l
666.161 1208.47 l
664.579 1208.47 663.300 1208.77 662.323 1209.37  c
661.347 1209.97 660.858 1210.76 660.858 1211.74  c
660.858 1212.43 661.102 1213.02 661.591 1213.50  c
662.079 1213.98 662.675 1214.22 663.378 1214.22  c
664.579 1214.22 665.829 1213.68 667.128 1212.62  c
h
675.917 1216.21 m
675.917 1200.30 l
678.803 1200.30 l
678.803 1203.29 l
679.945 1201.06 681.605 1199.95 683.783 1199.95  c
684.076 1199.95 684.384 1199.97 684.706 1200.02  c
684.706 1202.72 l
684.208 1202.55 683.768 1202.47 683.388 1202.47  c
681.561 1202.47 680.033 1203.55 678.803 1205.72  c
678.803 1216.21 l
h
699.852 1215.70 m
697.919 1216.28 696.264 1216.57 694.887 1216.57  c
692.543 1216.57 690.631 1215.80 689.152 1214.24  c
687.672 1212.68 686.932 1210.66 686.932 1208.18  c
686.932 1205.77 687.584 1203.79 688.888 1202.25  c
690.192 1200.70 691.859 1199.93 693.891 1199.93  c
695.814 1199.93 697.301 1200.62 698.351 1201.98  c
699.401 1203.35 699.926 1205.29 699.926 1207.81  c
699.911 1208.71 l
689.877 1208.71 l
690.297 1212.49 692.147 1214.38 695.429 1214.38  c
696.630 1214.38 698.104 1214.05 699.852 1213.41  c
h
690.009 1206.54 m
697.025 1206.54 l
697.025 1203.58 695.922 1202.10 693.715 1202.10  c
691.498 1202.10 690.263 1203.58 690.009 1206.54  c
h
704.906 1216.21 m
704.906 1200.30 l
707.792 1200.30 l
707.792 1203.29 l
708.934 1201.06 710.595 1199.95 712.772 1199.95  c
713.065 1199.95 713.373 1199.97 713.695 1200.02  c
713.695 1202.72 l
713.197 1202.55 712.758 1202.47 712.377 1202.47  c
710.551 1202.47 709.022 1203.55 707.792 1205.72  c
707.792 1216.21 l
h
728.842 1215.70 m
726.908 1216.28 725.253 1216.57 723.876 1216.57  c
721.532 1216.57 719.620 1215.80 718.141 1214.24  c
716.661 1212.68 715.922 1210.66 715.922 1208.18  c
715.922 1205.77 716.574 1203.79 717.877 1202.25  c
719.181 1200.70 720.849 1199.93 722.880 1199.93  c
724.804 1199.93 726.290 1200.62 727.340 1201.98  c
728.390 1203.35 728.915 1205.29 728.915 1207.81  c
728.900 1208.71 l
718.866 1208.71 l
719.286 1212.49 721.137 1214.38 724.418 1214.38  c
725.619 1214.38 727.094 1214.05 728.842 1213.41  c
h
718.998 1206.54 m
726.015 1206.54 l
726.015 1203.58 724.911 1202.10 722.704 1202.10  c
720.487 1202.10 719.252 1203.58 718.998 1206.54  c
h
f
newpath
658.771 1252.08 m
657.316 1252.08 655.455 1251.76 653.190 1251.13  c
653.190 1248.08 l
655.631 1249.22 657.638 1249.78 659.210 1249.78  c
660.421 1249.78 661.395 1249.46 662.133 1248.83  c
662.870 1248.20 663.239 1247.36 663.239 1246.33  c
663.239 1245.48 662.997 1244.75 662.514 1244.16  c
662.030 1243.56 661.139 1242.90 659.840 1242.16  c
658.346 1241.30 l
656.500 1240.25 655.199 1239.25 654.442 1238.32  c
653.685 1237.39 653.307 1236.30 653.307 1235.06  c
653.307 1233.39 653.912 1232.02 655.123 1230.94  c
656.334 1229.86 657.877 1229.32 659.752 1229.32  c
661.422 1229.32 663.185 1229.60 665.040 1230.15  c
665.040 1232.97 l
662.755 1232.07 661.051 1231.62 659.928 1231.62  c
658.864 1231.62 657.985 1231.90 657.291 1232.47  c
656.598 1233.03 656.251 1233.75 656.251 1234.61  c
656.251 1235.33 656.505 1235.97 657.013 1236.53  c
657.521 1237.08 658.449 1237.75 659.796 1238.52  c
661.349 1239.40 l
663.224 1240.46 664.533 1241.47 665.275 1242.41  c
666.017 1243.36 666.388 1244.50 666.388 1245.83  c
666.388 1247.71 665.692 1249.23 664.301 1250.37  c
662.909 1251.51 661.066 1252.08 658.771 1252.08  c
h
675.543 1251.91 m
674.078 1251.91 672.936 1251.49 672.116 1250.65  c
671.295 1249.81 670.885 1248.64 670.885 1247.15  c
670.885 1237.80 l
668.893 1237.80 l
668.893 1235.63 l
670.885 1235.63 l
670.885 1232.75 l
673.771 1232.47 l
673.771 1235.63 l
677.931 1235.63 l
677.931 1237.80 l
673.771 1237.80 l
673.771 1246.62 l
673.771 1248.70 674.669 1249.74 676.466 1249.74  c
676.847 1249.74 677.311 1249.67 677.858 1249.55  c
677.858 1251.54 l
676.969 1251.78 676.198 1251.91 675.543 1251.91  c
h
690.192 1249.52 m
688.463 1251.11 686.798 1251.91 685.197 1251.91  c
683.878 1251.91 682.785 1251.49 681.915 1250.67  c
681.046 1249.84 680.612 1248.80 680.612 1247.54  c
680.612 1245.80 681.342 1244.47 682.802 1243.53  c
684.262 1242.60 686.354 1242.14 689.078 1242.14  c
689.767 1242.14 l
689.767 1240.22 l
689.767 1238.37 688.820 1237.45 686.925 1237.45  c
685.402 1237.45 683.756 1237.92 681.989 1238.85  c
681.989 1236.47 l
683.932 1235.68 685.753 1235.28 687.453 1235.28  c
689.230 1235.28 690.541 1235.68 691.386 1236.48  c
692.230 1237.28 692.653 1238.53 692.653 1240.22  c
692.653 1247.42 l
692.653 1249.07 693.161 1249.90 694.176 1249.90  c
694.303 1249.90 694.489 1249.88 694.733 1249.84  c
694.938 1251.44 l
694.284 1251.75 693.561 1251.91 692.770 1251.91  c
691.422 1251.91 690.563 1251.11 690.192 1249.52  c
h
689.767 1247.95 m
689.767 1243.83 l
688.800 1243.81 l
687.218 1243.81 685.939 1244.11 684.962 1244.71  c
683.986 1245.31 683.497 1246.10 683.497 1247.07  c
683.497 1247.77 683.742 1248.35 684.230 1248.83  c
684.718 1249.31 685.314 1249.55 686.017 1249.55  c
687.218 1249.55 688.468 1249.02 689.767 1247.95  c
h
698.556 1251.54 m
698.556 1235.63 l
701.442 1235.63 l
701.442 1238.62 l
702.584 1236.39 704.245 1235.28 706.422 1235.28  c
706.715 1235.28 707.023 1235.30 707.345 1235.35  c
707.345 1238.05 l
706.847 1237.88 706.408 1237.80 706.027 1237.80  c
704.201 1237.80 702.672 1238.88 701.442 1241.05  c
701.442 1251.54 l
h
715.607 1251.91 m
714.142 1251.91 712.999 1251.49 712.179 1250.65  c
711.359 1249.81 710.949 1248.64 710.949 1247.15  c
710.949 1237.80 l
708.956 1237.80 l
708.956 1235.63 l
710.949 1235.63 l
710.949 1232.75 l
713.834 1232.47 l
713.834 1235.63 l
717.995 1235.63 l
717.995 1237.80 l
713.834 1237.80 l
713.834 1246.62 l
713.834 1248.70 714.733 1249.74 716.530 1249.74  c
716.911 1249.74 717.374 1249.67 717.921 1249.55  c
717.921 1251.54 l
717.033 1251.78 716.261 1251.91 715.607 1251.91  c
h
f
2 J
10.0000 M
1.00000 .400000 0.00000 RG
3.00000 w
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
575.089 1171.04 m
795.803 1171.04 l
795.803 1274.04 l
575.089 1274.04 l
575.089 1171.04 l
h
S
1.00000 w
2 J
10.0000 M
1.00000 0.00000 0.00000 RG
newpath
504.782 1222.54 m
504.782 1252.64 480.382 1277.04 450.282 1277.04  c
420.183 1277.04 395.782 1252.64 395.782 1222.54  c
395.782 1192.44 420.183 1168.04 450.282 1168.04  c
480.382 1168.04 504.782 1192.44 504.782 1222.54  c
h
f
3.00000 w
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
504.782 1222.54 m
504.782 1252.64 480.382 1277.04 450.282 1277.04  c
420.183 1277.04 395.782 1252.64 395.782 1222.54  c
395.782 1192.44 420.183 1168.04 450.282 1168.04  c
480.382 1168.04 504.782 1192.44 504.782 1222.54  c
h
S
1.00000 w
2 J
10.0000 M
0.00000 1.00000 1.00000 RG
newpath
975.109 1222.54 m
975.109 1252.64 950.709 1277.04 920.609 1277.04  c
890.510 1277.04 866.109 1252.64 866.109 1222.54  c
866.109 1192.44 890.510 1168.04 920.609 1168.04  c
950.709 1168.04 975.109 1192.44 975.109 1222.54  c
h
f
3.00000 w
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
975.109 1222.54 m
975.109 1252.64 950.709 1277.04 920.609 1277.04  c
890.510 1277.04 866.109 1252.64 866.109 1222.54  c
866.109 1192.44 890.510 1168.04 920.609 1168.04  c
950.709 1168.04 975.109 1192.44 975.109 1222.54  c
h
S
1.00000 w
2 J
10.0000 M
0 J
1.45000 M
newpath
1113.01 1216.21 m
1113.01 1194.53 l
1118.91 1194.53 l
1121.53 1194.53 1123.41 1194.97 1124.55 1195.85  c
1125.69 1196.74 1126.26 1198.19 1126.26 1200.21  c
1126.26 1202.52 1125.48 1204.32 1123.92 1205.63  c
1122.36 1206.94 1120.19 1207.59 1117.42 1207.59  c
1116.05 1207.59 l
1116.05 1216.21 l
h
1116.05 1205.27 m
1117.30 1205.27 l
1119.12 1205.27 1120.54 1204.85 1121.53 1204.01  c
1122.53 1203.17 1123.03 1201.98 1123.03 1200.45  c
1123.03 1199.15 1122.64 1198.22 1121.85 1197.66  c
1121.07 1197.11 1119.77 1196.83 1117.94 1196.83  c
1116.05 1196.83 l
h
1137.88 1214.19 m
1136.15 1215.78 1134.49 1216.57 1132.88 1216.57  c
1131.57 1216.57 1130.47 1216.16 1129.60 1215.34  c
1128.73 1214.51 1128.30 1213.47 1128.30 1212.21  c
1128.30 1210.47 1129.03 1209.14 1130.49 1208.20  c
1131.95 1207.27 1134.04 1206.80 1136.77 1206.80  c
1137.45 1206.80 l
1137.45 1204.88 l
1137.45 1203.04 1136.51 1202.12 1134.61 1202.12  c
1133.09 1202.12 1131.44 1202.58 1129.68 1203.52  c
1129.68 1201.13 l
1131.62 1200.34 1133.44 1199.95 1135.14 1199.95  c
1136.92 1199.95 1138.23 1200.35 1139.07 1201.15  c
1139.92 1201.95 1140.34 1203.20 1140.34 1204.88  c
1140.34 1212.09 l
1140.34 1213.74 1140.85 1214.57 1141.86 1214.57  c
1141.99 1214.57 1142.18 1214.55 1142.42 1214.51  c
1142.63 1216.11 l
1141.97 1216.42 1141.25 1216.57 1140.46 1216.57  c
1139.11 1216.57 1138.25 1215.78 1137.88 1214.19  c
h
1137.45 1212.62 m
1137.45 1208.50 l
1136.49 1208.47 l
1134.91 1208.47 1133.63 1208.77 1132.65 1209.37  c
1131.67 1209.97 1131.18 1210.76 1131.18 1211.74  c
1131.18 1212.43 1131.43 1213.02 1131.92 1213.50  c
1132.41 1213.98 1133.00 1214.22 1133.70 1214.22  c
1134.91 1214.22 1136.16 1213.68 1137.45 1212.62  c
h
1146.24 1216.21 m
1146.24 1200.30 l
1149.13 1200.30 l
1149.13 1203.29 l
1150.27 1201.06 1151.93 1199.95 1154.11 1199.95  c
1154.40 1199.95 1154.71 1199.97 1155.03 1200.02  c
1155.03 1202.72 l
1154.53 1202.55 1154.10 1202.47 1153.71 1202.47  c
1151.89 1202.47 1150.36 1203.55 1149.13 1205.72  c
1149.13 1216.21 l
h
1170.18 1215.70 m
1168.25 1216.28 1166.59 1216.57 1165.21 1216.57  c
1162.87 1216.57 1160.96 1215.80 1159.48 1214.24  c
1158.00 1212.68 1157.26 1210.66 1157.26 1208.18  c
1157.26 1205.77 1157.91 1203.79 1159.21 1202.25  c
1160.52 1200.70 1162.19 1199.93 1164.22 1199.93  c
1166.14 1199.93 1167.63 1200.62 1168.68 1201.98  c
1169.73 1203.35 1170.25 1205.29 1170.25 1207.81  c
1170.24 1208.71 l
1160.20 1208.71 l
1160.62 1212.49 1162.47 1214.38 1165.76 1214.38  c
1166.96 1214.38 1168.43 1214.05 1170.18 1213.41  c
h
1160.34 1206.54 m
1167.35 1206.54 l
1167.35 1203.58 1166.25 1202.10 1164.04 1202.10  c
1161.82 1202.10 1160.59 1203.58 1160.34 1206.54  c
h
1175.23 1216.21 m
1175.23 1200.30 l
1178.12 1200.30 l
1178.12 1203.29 l
1179.26 1201.06 1180.92 1199.95 1183.10 1199.95  c
1183.39 1199.95 1183.70 1199.97 1184.02 1200.02  c
1184.02 1202.72 l
1183.52 1202.55 1183.08 1202.47 1182.70 1202.47  c
1180.88 1202.47 1179.35 1203.55 1178.12 1205.72  c
1178.12 1216.21 l
h
1199.17 1215.70 m
1197.23 1216.28 1195.58 1216.57 1194.20 1216.57  c
1191.86 1216.57 1189.95 1215.80 1188.47 1214.24  c
1186.99 1212.68 1186.25 1210.66 1186.25 1208.18  c
1186.25 1205.77 1186.90 1203.79 1188.20 1202.25  c
1189.51 1200.70 1191.18 1199.93 1193.21 1199.93  c
1195.13 1199.93 1196.62 1200.62 1197.67 1201.98  c
1198.72 1203.35 1199.24 1205.29 1199.24 1207.81  c
1199.23 1208.71 l
1189.19 1208.71 l
1189.61 1212.49 1191.46 1214.38 1194.74 1214.38  c
1195.95 1214.38 1197.42 1214.05 1199.17 1213.41  c
h
1189.32 1206.54 m
1196.34 1206.54 l
1196.34 1203.58 1195.24 1202.10 1193.03 1202.10  c
1190.81 1202.10 1189.58 1203.58 1189.32 1206.54  c
h
f
newpath
1098.16 1252.08 m
1094.79 1252.08 1092.19 1251.09 1090.35 1249.12  c
1088.52 1247.14 1087.60 1244.34 1087.60 1240.71  c
1087.60 1237.10 1088.53 1234.30 1090.40 1232.31  c
1092.27 1230.31 1094.91 1229.32 1098.31 1229.32  c
1100.25 1229.32 1102.53 1229.64 1105.13 1230.27  c
1105.13 1233.16 l
1102.16 1232.13 1099.87 1231.62 1098.26 1231.62  c
1095.91 1231.62 1094.09 1232.41 1092.80 1234.01  c
1091.51 1235.60 1090.87 1237.84 1090.87 1240.74  c
1090.87 1243.51 1091.55 1245.69 1092.93 1247.28  c
1094.31 1248.88 1096.19 1249.68 1098.57 1249.68  c
1100.62 1249.68 1102.82 1249.05 1105.16 1247.79  c
1105.16 1250.43 l
1103.02 1251.53 1100.69 1252.08 1098.16 1252.08  c
h
1115.94 1251.91 m
1113.67 1251.91 1111.85 1251.15 1110.49 1249.64  c
1109.14 1248.13 1108.46 1246.12 1108.46 1243.59  c
1108.46 1241.03 1109.14 1239.00 1110.50 1237.51  c
1111.86 1236.02 1113.71 1235.28 1116.05 1235.28  c
1118.38 1235.28 1120.23 1236.02 1121.59 1237.51  c
1122.95 1239.00 1123.63 1241.02 1123.63 1243.56  c
1123.63 1246.15 1122.95 1248.20 1121.58 1249.68  c
1120.22 1251.16 1118.34 1251.91 1115.94 1251.91  c
h
1115.99 1249.74 m
1119.04 1249.74 1120.57 1247.68 1120.57 1243.56  c
1120.57 1239.48 1119.06 1237.45 1116.05 1237.45  c
1113.04 1237.45 1111.53 1239.49 1111.53 1243.59  c
1111.53 1247.69 1113.02 1249.74 1115.99 1249.74  c
h
1128.15 1251.54 m
1128.15 1235.63 l
1131.03 1235.63 l
1131.03 1238.62 l
1132.44 1236.39 1134.24 1235.28 1136.45 1235.28  c
1138.58 1235.28 1140.03 1236.39 1140.80 1238.62  c
1142.17 1236.38 1143.95 1235.27 1146.13 1235.27  c
1147.54 1235.27 1148.63 1235.68 1149.40 1236.50  c
1150.17 1237.33 1150.56 1238.48 1150.56 1239.97  c
1150.56 1251.54 l
1147.66 1251.54 l
1147.66 1240.42 l
1147.66 1238.61 1146.94 1237.70 1145.50 1237.70  c
1144.01 1237.70 1142.44 1238.76 1140.80 1240.88  c
1140.80 1251.54 l
1137.90 1251.54 l
1137.90 1240.42 l
1137.90 1238.60 1137.17 1237.68 1135.70 1237.68  c
1134.25 1237.68 1132.69 1238.75 1131.03 1240.88  c
1131.03 1251.54 l
h
1156.15 1257.33 m
1156.15 1235.63 l
1159.04 1235.63 l
1159.04 1238.62 l
1160.22 1236.39 1161.99 1235.28 1164.36 1235.28  c
1166.27 1235.28 1167.78 1235.98 1168.88 1237.37  c
1169.97 1238.77 1170.52 1240.68 1170.52 1243.10  c
1170.52 1245.74 1169.90 1247.87 1168.66 1249.48  c
1167.41 1251.10 1165.77 1251.91 1163.74 1251.91  c
1161.86 1251.91 1160.29 1251.18 1159.04 1249.74  c
1159.04 1257.33 l
h
1159.04 1247.75 m
1160.52 1249.07 1161.94 1249.74 1163.29 1249.74  c
1166.06 1249.74 1167.45 1247.62 1167.45 1243.40  c
1167.45 1239.66 1166.22 1237.80 1163.76 1237.80  c
1162.14 1237.80 1160.57 1238.67 1159.04 1240.42  c
h
1175.04 1251.54 m
1175.04 1228.41 l
1177.92 1228.41 l
1177.92 1251.54 l
h
1195.37 1251.03 m
1193.43 1251.61 1191.78 1251.91 1190.40 1251.91  c
1188.06 1251.91 1186.15 1251.13 1184.67 1249.57  c
1183.19 1248.01 1182.45 1245.99 1182.45 1243.51  c
1182.45 1241.10 1183.10 1239.12 1184.40 1237.58  c
1185.71 1236.04 1187.37 1235.27 1189.41 1235.27  c
1191.33 1235.27 1192.82 1235.95 1193.87 1237.32  c
1194.92 1238.68 1195.44 1240.63 1195.44 1243.15  c
1195.43 1244.04 l
1185.39 1244.04 l
1185.81 1247.82 1187.66 1249.71 1190.94 1249.71  c
1192.14 1249.71 1193.62 1249.39 1195.37 1248.74  c
h
1185.52 1241.87 m
1192.54 1241.87 l
1192.54 1238.91 1191.44 1237.43 1189.23 1237.43  c
1187.01 1237.43 1185.78 1238.91 1185.52 1241.87  c
h
1205.20 1251.91 m
1203.73 1251.91 1202.59 1251.49 1201.77 1250.65  c
1200.95 1249.81 1200.54 1248.64 1200.54 1247.15  c
1200.54 1237.80 l
1198.55 1237.80 l
1198.55 1235.63 l
1200.54 1235.63 l
1200.54 1232.75 l
1203.42 1232.47 l
1203.42 1235.63 l
1207.58 1235.63 l
1207.58 1237.80 l
1203.42 1237.80 l
1203.42 1246.62 l
1203.42 1248.70 1204.32 1249.74 1206.12 1249.74  c
1206.50 1249.74 1206.96 1249.67 1207.51 1249.55  c
1207.51 1251.54 l
1206.62 1251.78 1205.85 1251.91 1205.20 1251.91  c
h
1223.30 1251.03 m
1221.37 1251.61 1219.71 1251.91 1218.34 1251.91  c
1215.99 1251.91 1214.08 1251.13 1212.60 1249.57  c
1211.12 1248.01 1210.38 1245.99 1210.38 1243.51  c
1210.38 1241.10 1211.03 1239.12 1212.34 1237.58  c
1213.64 1236.04 1215.31 1235.27 1217.34 1235.27  c
1219.26 1235.27 1220.75 1235.95 1221.80 1237.32  c
1222.85 1238.68 1223.37 1240.63 1223.37 1243.15  c
1223.36 1244.04 l
1213.33 1244.04 l
1213.75 1247.82 1215.60 1249.71 1218.88 1249.71  c
1220.08 1249.71 1221.55 1249.39 1223.30 1248.74  c
h
1213.46 1241.87 m
1220.47 1241.87 l
1220.47 1238.91 1219.37 1237.43 1217.16 1237.43  c
1214.95 1237.43 1213.71 1238.91 1213.46 1241.87  c
h
f
2 J
10.0000 M
3.00000 w
0 J
1.45000 M
newpath
1045.42 1171.04 m
1266.13 1171.04 l
1266.13 1274.04 l
1045.42 1274.04 l
1045.42 1171.04 l
h
S
1.00000 w
2 J
10.0000 M
newpath
935.609 1222.54 m
935.609 1230.82 928.893 1237.54 920.609 1237.54  c
912.325 1237.54 905.609 1230.82 905.609 1222.54  c
905.609 1214.25 912.325 1207.54 920.609 1207.54  c
928.893 1207.54 935.609 1214.25 935.609 1222.54  c
h
f
0 J
1.45000 M
newpath
935.609 1222.54 m
935.609 1230.82 928.893 1237.54 920.609 1237.54  c
912.325 1237.54 905.609 1230.82 905.609 1222.54  c
905.609 1214.25 912.325 1207.54 920.609 1207.54  c
928.893 1207.54 935.609 1214.25 935.609 1222.54  c
h
S
2 J
10.0000 M
3.00000 w
0 J
1.45000 M
newpath
504.782 1222.54 m
565.089 1222.54 l
S
newpath
575.089 1222.54 m
560.089 1216.29 l
563.839 1222.54 l
560.089 1228.79 l
h
f
1.00000 w
2 J
10.0000 M
3.00000 w
0 J
1.45000 M
newpath
795.803 1222.54 m
856.109 1222.54 l
S
newpath
866.109 1222.54 m
851.109 1216.29 l
854.859 1222.54 l
851.109 1228.79 l
h
f
1.00000 w
2 J
10.0000 M
3.00000 w
0 J
1.45000 M
newpath
975.109 1222.54 m
1035.42 1222.54 l
S
newpath
1045.42 1222.54 m
1030.42 1216.29 l
1034.17 1222.54 l
1030.42 1228.79 l
h
f
1.00000 w
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
